-- -------------------------------------------------------------
-- 
-- File Name: C:\Projects\ipcore_integration_v2\full_64_hdl\hdlsrc\gauss_sobel_rgb_64bit_full\Subsystem_ip_src_Subsystem1_block.vhd
-- Created: 2023-05-03 00:57:07
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_Subsystem1_block
-- Source Path: gauss_sobel_rgb_64bit_full/Subsystem/conv_core_sobel1/Subsystem1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Subsystem_ip_src_Subsystem_pkg.ALL;

ENTITY Subsystem_ip_src_Subsystem1_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        vidIn                             :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        coeffsX_bot_default               :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
        coeffsY_bot_default               :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
        coeffsX_Top                       :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
        coeffsY_Left                      :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
        Enable                            :   IN    std_logic;
        sobel_R                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        sobel_L                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END Subsystem_ip_src_Subsystem1_block;


ARCHITECTURE rtl OF Subsystem_ip_src_Subsystem1_block IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_slicer_R_operation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_slicer_L_operation1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_conv_X1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          coeffsX                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          Image_R                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          Image_L                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          alphavalid                      :   IN    std_logic;
          RX                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          LX                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_conv_Y1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          coeffsY                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          Image_R                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          Image_L                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          alphavalid                      :   IN    std_logic;
          RY                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          LY                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_conv_X
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          coeffsX                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          Image_R                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          Image_L                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          alphavalid                      :   IN    std_logic;
          RX                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          LX                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_conv_Y
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          coeffsY                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          Image_R                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          Image_L                         :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          alphavalid                      :   IN    std_logic;
          RY                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          LY                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_slicer_R_operation
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation(rtl);

  FOR ALL : Subsystem_ip_src_slicer_L_operation1
    USE ENTITY work.Subsystem_ip_src_slicer_L_operation1(rtl);

  FOR ALL : Subsystem_ip_src_conv_X1
    USE ENTITY work.Subsystem_ip_src_conv_X1(rtl);

  FOR ALL : Subsystem_ip_src_conv_Y1
    USE ENTITY work.Subsystem_ip_src_conv_Y1(rtl);

  FOR ALL : Subsystem_ip_src_conv_X
    USE ENTITY work.Subsystem_ip_src_conv_X(rtl);

  FOR ALL : Subsystem_ip_src_conv_Y
    USE ENTITY work.Subsystem_ip_src_conv_Y(rtl);

  -- Signals
  SIGNAL alphavalid                       : std_logic;
  SIGNAL vidIn_unsigned                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL slice_right_gray_out1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux_out1                         : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL slice_left_gray_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux1_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL conv_X1_out1                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_X1_out2                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_Y1_out1                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_Y1_out2                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_X_out1                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_X_out2                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_Y_out1                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_Y_out2                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL conv_X1_out1_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift4_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice1_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL conv_Y1_out1_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift6_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice5_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Sum2_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL conv_X_out1_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice_out1                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL conv_Y_out1_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift2_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice2_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Sum_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum4_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL right_red_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL right_green_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL right_blue_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y                                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_bypass                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_last_value                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL conv_X1_out2_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift5_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice6_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL conv_Y1_out2_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift7_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice7_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Sum3_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL conv_X_out2_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift1_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice3_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL conv_Y_out2_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift3_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice4_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Sum1_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum5_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL left_red_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL left_green_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL left_blue_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_1                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_bypass_1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_last_value_1                   : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  -- slice out gray right

  u_slicer_R_operation : Subsystem_ip_src_slicer_R_operation
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(slice_right_gray_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux_out1(0),  -- uint8
              out_2 => Mux_out1(1),  -- uint8
              out_3 => Mux_out1(2),  -- uint8
              out_4 => Mux_out1(3),  -- uint8
              out_5 => Mux_out1(4),  -- uint8
              out_6 => Mux_out1(5),  -- uint8
              out_7 => Mux_out1(6),  -- uint8
              out_8 => Mux_out1(7),  -- uint8
              out_9 => Mux_out1(8)  -- uint8
              );

  u_slicer_L_operation1 : Subsystem_ip_src_slicer_L_operation1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(slice_left_gray_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux1_out1(0),  -- uint8
              out_2 => Mux1_out1(1),  -- uint8
              out_3 => Mux1_out1(2),  -- uint8
              out_4 => Mux1_out1(3),  -- uint8
              out_5 => Mux1_out1(4),  -- uint8
              out_6 => Mux1_out1(5),  -- uint8
              out_7 => Mux1_out1(6),  -- uint8
              out_8 => Mux1_out1(7),  -- uint8
              out_9 => Mux1_out1(8)  -- uint8
              );

  u_conv_X1 : Subsystem_ip_src_conv_X1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              coeffsX => coeffsX_Top,  -- int8 [9]
              Image_R => Mux_out1,  -- uint8 [9]
              Image_L => Mux1_out1,  -- uint8 [9]
              alphavalid => Enable,
              RX => conv_X1_out1,  -- uint8
              LX => conv_X1_out2  -- uint8
              );

  u_conv_Y1 : Subsystem_ip_src_conv_Y1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              coeffsY => coeffsY_Left,  -- int8 [9]
              Image_R => Mux_out1,  -- uint8 [9]
              Image_L => Mux1_out1,  -- uint8 [9]
              alphavalid => Enable,
              RY => conv_Y1_out1,  -- uint8
              LY => conv_Y1_out2  -- uint8
              );

  u_conv_X : Subsystem_ip_src_conv_X
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              coeffsX => coeffsX_bot_default,  -- int8 [9]
              Image_R => Mux_out1,  -- uint8 [9]
              Image_L => Mux1_out1,  -- uint8 [9]
              alphavalid => Enable,
              RX => conv_X_out1,  -- uint8
              LX => conv_X_out2  -- uint8
              );

  u_conv_Y : Subsystem_ip_src_conv_Y
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              coeffsY => coeffsY_bot_default,  -- int8 [9]
              Image_R => Mux_out1,  -- uint8 [9]
              Image_L => Mux1_out1,  -- uint8 [9]
              alphavalid => Enable,
              RY => conv_Y_out1,  -- uint8
              LY => conv_Y_out2  -- uint8
              );

  alphavalid <= Enable;

  vidIn_unsigned <= unsigned(vidIn);

  slice_right_gray_out1 <= vidIn_unsigned(31 DOWNTO 24);


  slice_left_gray_out1 <= vidIn_unsigned(63 DOWNTO 56);


  conv_X1_out1_unsigned <= unsigned(conv_X1_out1);

  Bit_Shift4_out1 <= conv_X1_out1_unsigned srl 1;

  Bit_Slice1_out1 <= Bit_Shift4_out1(6 DOWNTO 0);

  conv_Y1_out1_unsigned <= unsigned(conv_Y1_out1);

  Bit_Shift6_out1 <= conv_Y1_out1_unsigned srl 1;

  Bit_Slice5_out1 <= Bit_Shift6_out1(6 DOWNTO 0);

  Sum2_out1 <= resize(resize(Bit_Slice1_out1, 32) + resize(Bit_Slice5_out1, 32), 8);

  conv_X_out1_unsigned <= unsigned(conv_X_out1);

  Bit_Shift_out1 <= conv_X_out1_unsigned srl 1;

  Bit_Slice_out1 <= Bit_Shift_out1(6 DOWNTO 0);

  conv_Y_out1_unsigned <= unsigned(conv_Y_out1);

  Bit_Shift2_out1 <= conv_Y_out1_unsigned srl 1;

  Bit_Slice2_out1 <= Bit_Shift2_out1(6 DOWNTO 0);

  Sum_out1 <= resize(resize(Bit_Slice_out1, 32) + resize(Bit_Slice2_out1, 32), 8);

  Sum4_out1 <= Sum2_out1 + Sum_out1;

  right_red_out1 <= vidIn_unsigned(23 DOWNTO 16);

  right_green_out1 <= vidIn_unsigned(15 DOWNTO 8);

  right_blue_out1 <= vidIn_unsigned(7 DOWNTO 0);

  y <= Sum4_out1 & right_red_out1 & right_green_out1 & right_blue_out1;

  sobel_R_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_last_value <= y_bypass;
      END IF;
    END IF;
  END PROCESS sobel_R_bypass_process;


  
  y_bypass <= y_last_value WHEN alphavalid = '0' ELSE
      y;

  sobel_R <= std_logic_vector(y_bypass);

  conv_X1_out2_unsigned <= unsigned(conv_X1_out2);

  Bit_Shift5_out1 <= conv_X1_out2_unsigned srl 1;

  Bit_Slice6_out1 <= Bit_Shift5_out1(6 DOWNTO 0);

  conv_Y1_out2_unsigned <= unsigned(conv_Y1_out2);

  Bit_Shift7_out1 <= conv_Y1_out2_unsigned srl 1;

  Bit_Slice7_out1 <= Bit_Shift7_out1(6 DOWNTO 0);

  Sum3_out1 <= resize(resize(Bit_Slice6_out1, 32) + resize(Bit_Slice7_out1, 32), 8);

  conv_X_out2_unsigned <= unsigned(conv_X_out2);

  Bit_Shift1_out1 <= conv_X_out2_unsigned srl 1;

  Bit_Slice3_out1 <= Bit_Shift1_out1(6 DOWNTO 0);

  conv_Y_out2_unsigned <= unsigned(conv_Y_out2);

  Bit_Shift3_out1 <= conv_Y_out2_unsigned srl 1;

  Bit_Slice4_out1 <= Bit_Shift3_out1(6 DOWNTO 0);

  Sum1_out1 <= resize(resize(Bit_Slice3_out1, 32) + resize(Bit_Slice4_out1, 32), 8);

  Sum5_out1 <= Sum3_out1 + Sum1_out1;

  left_red_out1 <= vidIn_unsigned(55 DOWNTO 48);

  left_green_out1 <= vidIn_unsigned(47 DOWNTO 40);

  left_blue_out1 <= vidIn_unsigned(39 DOWNTO 32);

  y_1 <= Sum5_out1 & left_red_out1 & left_green_out1 & left_blue_out1;

  sobel_L_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_last_value_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_last_value_1 <= y_bypass_1;
      END IF;
    END IF;
  END PROCESS sobel_L_bypass_process;


  
  y_bypass_1 <= y_last_value_1 WHEN alphavalid = '0' ELSE
      y_1;

  sobel_L <= std_logic_vector(y_bypass_1);

END rtl;

