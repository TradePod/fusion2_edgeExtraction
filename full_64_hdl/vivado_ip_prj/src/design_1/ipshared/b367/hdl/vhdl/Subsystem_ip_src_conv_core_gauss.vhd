-- -------------------------------------------------------------
-- 
-- File Name: C:\Projects\ipcore_integration_v2\full_64_hdl\hdlsrc\gauss_sobel_rgb_64bit_full\Subsystem_ip_src_conv_core_gauss.vhd
-- Created: 2023-05-03 00:57:07
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_conv_core_gauss
-- Source Path: gauss_sobel_rgb_64bit_full/Subsystem/conv_core_gauss
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Subsystem_ip_src_Subsystem_pkg.ALL;

ENTITY Subsystem_ip_src_conv_core_gauss IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Video_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        coeffsGauss                       :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        Video_out                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic
        );
END Subsystem_ip_src_conv_core_gauss;


ARCHITECTURE rtl OF Subsystem_ip_src_conv_core_gauss IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_Subsystem1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          VideoIn                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          coeffsGauss                     :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          Enable                          :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_Subsystem1
    USE ENTITY work.Subsystem_ip_src_Subsystem1(rtl);

  -- Signals
  SIGNAL valid                            : std_logic;
  SIGNAL Subsystem1_out1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL alpha_reg_next                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_hStart               : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL alpha_reg_next_1                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_hEnd                 : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL alpha_reg_next_2                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_vStart               : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL alpha_reg_next_3                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_vEnd                 : std_logic;
  SIGNAL alpha_reg_4                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL alpha_reg_next_4                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_valid                : std_logic;

BEGIN
  u_Subsystem1 : Subsystem_ip_src_Subsystem1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              VideoIn => Video_in,  -- ufix64
              coeffsGauss => coeffsGauss,  -- uint8 [9]
              Enable => valid,
              Video_out => Subsystem1_out1  -- ufix64
              );

  valid <= ctrl_valid;

  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg(0) <= '0';
      alpha_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg(0) <= alpha_reg_next(0);
        alpha_reg(1) <= alpha_reg_next(1);
      END IF;
    END IF;
  END PROCESS c_process;

  Delay1_out1_hStart <= alpha_reg(1);
  alpha_reg_next(0) <= ctrl_hStart;
  alpha_reg_next(1) <= alpha_reg(0);

  valid_out_hStart <= Delay1_out1_hStart;

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_1(0) <= '0';
      alpha_reg_1(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_1(0) <= alpha_reg_next_1(0);
        alpha_reg_1(1) <= alpha_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS c_1_process;

  Delay1_out1_hEnd <= alpha_reg_1(1);
  alpha_reg_next_1(0) <= ctrl_hEnd;
  alpha_reg_next_1(1) <= alpha_reg_1(0);

  valid_out_hEnd <= Delay1_out1_hEnd;

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_2(0) <= '0';
      alpha_reg_2(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_2(0) <= alpha_reg_next_2(0);
        alpha_reg_2(1) <= alpha_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS c_2_process;

  Delay1_out1_vStart <= alpha_reg_2(1);
  alpha_reg_next_2(0) <= ctrl_vStart;
  alpha_reg_next_2(1) <= alpha_reg_2(0);

  valid_out_vStart <= Delay1_out1_vStart;

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_3(0) <= '0';
      alpha_reg_3(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_3(0) <= alpha_reg_next_3(0);
        alpha_reg_3(1) <= alpha_reg_next_3(1);
      END IF;
    END IF;
  END PROCESS c_3_process;

  Delay1_out1_vEnd <= alpha_reg_3(1);
  alpha_reg_next_3(0) <= ctrl_vEnd;
  alpha_reg_next_3(1) <= alpha_reg_3(0);

  valid_out_vEnd <= Delay1_out1_vEnd;

  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_4(0) <= '0';
      alpha_reg_4(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_4(0) <= alpha_reg_next_4(0);
        alpha_reg_4(1) <= alpha_reg_next_4(1);
      END IF;
    END IF;
  END PROCESS c_4_process;

  Delay1_out1_valid <= alpha_reg_4(1);
  alpha_reg_next_4(0) <= ctrl_valid;
  alpha_reg_next_4(1) <= alpha_reg_4(0);

  valid_out_valid <= Delay1_out1_valid;

  Video_out <= Subsystem1_out1;

END rtl;

