-- -------------------------------------------------------------
-- 
-- File Name: C:\Projects\ipcore_integration_v2\full_64_hdl\hdlsrc\gauss_sobel_rgb_64bit_full\Subsystem_ip_src_Subsystem1_block1.vhd
-- Created: 2023-05-03 00:57:07
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_Subsystem1_block1
-- Source Path: gauss_sobel_rgb_64bit_full/Subsystem/rgb_filter/Subsystem1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem_ip_src_Subsystem1_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In2                               :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        redmax                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        greenmax                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        bluemax                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        redMin                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        greenMin                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        blueMin                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable                            :   IN    std_logic;
        Video_outLeft                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        Video_outRight                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END Subsystem_ip_src_Subsystem1_block1;


ARCHITECTURE rtl OF Subsystem_ip_src_Subsystem1_block1 IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_comparison2
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_comparison3
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_comparison4
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_comparison
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_comparison6
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_comparison1
    PORT( In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          max                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_comparison2
    USE ENTITY work.Subsystem_ip_src_comparison2(rtl);

  FOR ALL : Subsystem_ip_src_comparison3
    USE ENTITY work.Subsystem_ip_src_comparison3(rtl);

  FOR ALL : Subsystem_ip_src_comparison4
    USE ENTITY work.Subsystem_ip_src_comparison4(rtl);

  FOR ALL : Subsystem_ip_src_comparison
    USE ENTITY work.Subsystem_ip_src_comparison(rtl);

  FOR ALL : Subsystem_ip_src_comparison6
    USE ENTITY work.Subsystem_ip_src_comparison6(rtl);

  FOR ALL : Subsystem_ip_src_comparison1
    USE ENTITY work.Subsystem_ip_src_comparison1(rtl);

  -- Signals
  SIGNAL alphavalid                       : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL In2_unsigned                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL slice_2_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL comparison2_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL comparison2_out1_unsigned        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic8_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL gray3_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL comparison3_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL comparison3_out1_unsigned        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic7_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum3_op_stage1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL gray4_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL comparison4_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL comparison4_out1_unsigned        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic9_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum3_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y                                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1_last_value           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL slice_1_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL comparison_out1                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL comparison_out1_unsigned         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic2_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL gray1_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL comparison6_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL comparison6_out1_unsigned        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic1_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_op_stage1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL gray2_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL comparison1_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL comparison1_out1_unsigned        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic6_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_1                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1_last_value           : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  -- slice out red right
  -- 
  -- slice out green
  -- 
  -- slice out blue
  -- 
  -- slice out blue
  -- 
  -- slice out right left
  -- 
  -- slice out green

  u_comparison2 : Subsystem_ip_src_comparison2
    PORT MAP( In1 => std_logic_vector(slice_2_out1),  -- uint8
              max => redmax,  -- uint8
              min => redMin,  -- uint8
              Out1 => comparison2_out1  -- uint8
              );

  u_comparison3 : Subsystem_ip_src_comparison3
    PORT MAP( In1 => std_logic_vector(gray3_out1),  -- uint8
              max => greenmax,  -- uint8
              min => greenMin,  -- uint8
              Out1 => comparison3_out1  -- uint8
              );

  u_comparison4 : Subsystem_ip_src_comparison4
    PORT MAP( In1 => std_logic_vector(gray4_out1),  -- uint8
              max => bluemax,  -- uint8
              min => blueMin,  -- uint8
              Out1 => comparison4_out1  -- uint8
              );

  u_comparison : Subsystem_ip_src_comparison
    PORT MAP( In1 => std_logic_vector(slice_1_out1),  -- uint8
              max => redmax,  -- uint8
              min => redMin,  -- uint8
              Out1 => comparison_out1  -- uint8
              );

  u_comparison6 : Subsystem_ip_src_comparison6
    PORT MAP( In1 => std_logic_vector(gray1_out1),  -- uint8
              max => greenmax,  -- uint8
              min => greenMin,  -- uint8
              Out1 => comparison6_out1  -- uint8
              );

  u_comparison1 : Subsystem_ip_src_comparison1
    PORT MAP( In1 => std_logic_vector(gray2_out1),  -- uint8
              max => bluemax,  -- uint8
              min => blueMin,  -- uint8
              Out1 => comparison1_out1  -- uint8
              );

  alphavalid <= Enable;

  enb_gated <= Enable AND enb;

  In2_unsigned <= unsigned(In2);

  slice_2_out1 <= In2_unsigned(55 DOWNTO 48);

  comparison2_out1_unsigned <= unsigned(comparison2_out1);

  Shift_Arithmetic8_out1 <= SHIFT_RIGHT(comparison2_out1_unsigned, 2);

  gray3_out1 <= In2_unsigned(47 DOWNTO 40);

  comparison3_out1_unsigned <= unsigned(comparison3_out1);

  Shift_Arithmetic7_out1 <= SHIFT_RIGHT(comparison3_out1_unsigned, 1);

  Sum3_op_stage1 <= Shift_Arithmetic8_out1 + Shift_Arithmetic7_out1;

  gray4_out1 <= In2_unsigned(39 DOWNTO 32);

  comparison4_out1_unsigned <= unsigned(comparison4_out1);

  Shift_Arithmetic9_out1 <= SHIFT_RIGHT(comparison4_out1_unsigned, 3);

  Sum3_out1 <= Sum3_op_stage1 + Shift_Arithmetic9_out1;

  y <= Sum3_out1 & comparison2_out1_unsigned & comparison3_out1_unsigned & comparison4_out1_unsigned;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_out1 <= y;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  out0_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_out1_last_value <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  Delay1_out1_1 <= Delay1_out1_last_value WHEN alphavalid = '0' ELSE
      Delay1_out1;

  Video_outLeft <= std_logic_vector(Delay1_out1_1);

  enb_gated_1 <= Enable AND enb;

  slice_1_out1 <= In2_unsigned(23 DOWNTO 16);

  comparison_out1_unsigned <= unsigned(comparison_out1);

  Shift_Arithmetic2_out1 <= SHIFT_RIGHT(comparison_out1_unsigned, 2);

  gray1_out1 <= In2_unsigned(15 DOWNTO 8);

  comparison6_out1_unsigned <= unsigned(comparison6_out1);

  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(comparison6_out1_unsigned, 1);

  Sum1_op_stage1 <= Shift_Arithmetic2_out1 + Shift_Arithmetic1_out1;

  gray2_out1 <= In2_unsigned(7 DOWNTO 0);

  comparison1_out1_unsigned <= unsigned(comparison1_out1);

  Shift_Arithmetic6_out1 <= SHIFT_RIGHT(comparison1_out1_unsigned, 3);

  Sum1_out1 <= Sum1_op_stage1 + Shift_Arithmetic6_out1;

  y_1 <= Sum1_out1 & comparison_out1_unsigned & comparison6_out1_unsigned & comparison1_out1_unsigned;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay2_out1 <= y_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  out0_bypass_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay2_out1_last_value <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_1_process;


  
  Delay2_out1_1 <= Delay2_out1_last_value WHEN alphavalid = '0' ELSE
      Delay2_out1;

  Video_outRight <= std_logic_vector(Delay2_out1_1);

END rtl;

