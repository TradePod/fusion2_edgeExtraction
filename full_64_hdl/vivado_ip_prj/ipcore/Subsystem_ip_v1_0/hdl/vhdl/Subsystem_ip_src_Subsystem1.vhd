-- -------------------------------------------------------------
-- 
-- File Name: C:\Projects\ipcore_integration_v2\full_64_hdl\hdlsrc\gauss_sobel_rgb_64bit_full\Subsystem_ip_src_Subsystem1.vhd
-- Created: 2023-05-03 00:57:07
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_Subsystem1
-- Source Path: gauss_sobel_rgb_64bit_full/Subsystem/conv_core_gauss/Subsystem1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Subsystem_ip_src_Subsystem_pkg.ALL;

ENTITY Subsystem_ip_src_Subsystem1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        VideoIn                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        coeffsGauss                       :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
        Enable                            :   IN    std_logic;
        Video_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END Subsystem_ip_src_Subsystem1;


ARCHITECTURE rtl OF Subsystem_ip_src_Subsystem1 IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_slicer_R_operation4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_slicer_R_operation5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_slicer_R_operation6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_slicer_R_operation1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_slicer_R_operation2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_slicer_R_operation3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid                      :   IN    std_logic;
          out_1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_2                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_3                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_4                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_5                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_6                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_7                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_8                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out_9                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_slicer_R_operation4
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation4(rtl);

  FOR ALL : Subsystem_ip_src_slicer_R_operation5
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation5(rtl);

  FOR ALL : Subsystem_ip_src_slicer_R_operation6
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation6(rtl);

  FOR ALL : Subsystem_ip_src_slicer_R_operation1
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation1(rtl);

  FOR ALL : Subsystem_ip_src_slicer_R_operation2
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation2(rtl);

  FOR ALL : Subsystem_ip_src_slicer_R_operation3
    USE ENTITY work.Subsystem_ip_src_slicer_R_operation3(rtl);

  -- Signals
  SIGNAL alphavalid                       : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL coeffsGauss_unsigned             : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL VideoIn_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL right_red1_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux1_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Mux1_out1_1                      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Data_Type_Conversion6_out1       : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product3_out1                    : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay2_out1                      : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL in0_0                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL in0_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_op_stage1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_2                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage3_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements3_op_stage2       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_3                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage4_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements3_op_stage3       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_4                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage5_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements3_op_stage4       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_5                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage6_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements3_op_stage5       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_6                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage7_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements3_op_stage6       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_7                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage8_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements3_op_stage7       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_8                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements3_stage9_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL out0                             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Shift3_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion12_out1      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic4_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL right_green1_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux5_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Mux5_out1_1                      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Data_Type_Conversion7_out1       : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product4_out1                    : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay6_out1                      : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL in0_0_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL in0_1_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_op_stage1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_2_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage3_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements4_op_stage2       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_3_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage4_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements4_op_stage3       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_4_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage5_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements4_op_stage4       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_5_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage6_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements4_op_stage5       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_6_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage7_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements4_op_stage6       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_7_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage8_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements4_op_stage7       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_8_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements4_stage9_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL out0_1                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Shift4_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion1_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic3_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum2_op_stage1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL right_blue1_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux6_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Mux6_out1_1                      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Data_Type_Conversion8_out1       : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product5_out1                    : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay8_out1                      : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL in0_0_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL in0_1_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_op_stage1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_2_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage3_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements5_op_stage2       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_3_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage4_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements5_op_stage3       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_4_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage5_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements5_op_stage4       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_5_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage6_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements5_op_stage5       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_6_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage7_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements5_op_stage6       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_7_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage8_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements5_op_stage7       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_8_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements5_stage9_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL out0_2                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Shift5_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion2_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic5_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum2_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y                                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay4_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay4_out1_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay4_out1_last_value           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL right_red_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux2_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Mux2_out1_1                      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product6_out1                    : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Delay1_out1                      : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL in0_0_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL in0_1_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_op_stage1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_2_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage3_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements6_op_stage2       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_3_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage4_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements6_op_stage3       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_4_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage5_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements6_op_stage4       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_5_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage6_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements6_op_stage5       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_6_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage7_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements6_op_stage6       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_7_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage8_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements6_op_stage7       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_8_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements6_stage9_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL out0_3                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Shift_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion5_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic2_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL right_green_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux3_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Mux3_out1_1                      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Data_Type_Conversion10_out1      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product1_out1                    : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL enb_gated_6                      : std_logic;
  SIGNAL Delay5_out1                      : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL in0_0_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL in0_1_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_op_stage1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_2_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage3_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements1_op_stage2       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_3_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage4_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements1_op_stage3       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_4_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage5_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements1_op_stage4       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_5_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage6_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements1_op_stage5       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_6_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage7_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements1_op_stage6       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_7_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage8_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements1_op_stage7       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_8_4                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements1_stage9_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL out0_4                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Shift1_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion4_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic1_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_op_stage1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL right_blue_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Mux4_out1                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Mux4_out1_1                      : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Data_Type_Conversion9_out1       : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Product2_out1                    : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL enb_gated_7                      : std_logic;
  SIGNAL Delay7_out1                      : vector_of_unsigned16(0 TO 8);  -- uint16 [9]
  SIGNAL in0_0_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL in0_1_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_op_stage1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_2_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage3_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements2_op_stage2       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_3_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage4_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements2_op_stage3       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_4_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage5_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements2_op_stage4       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_5_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage6_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements2_op_stage5       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_6_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage7_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements2_op_stage6       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_7_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage8_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Sum_of_Elements2_op_stage7       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL in0_8_5                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Sum_of_Elements2_stage9_add_temp : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL out0_5                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Shift2_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion3_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic6_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_1                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay3_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay3_out1_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay3_out1_last_value           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat1_out1                 : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_slicer_R_operation4 : Subsystem_ip_src_slicer_R_operation4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(right_red1_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux1_out1(0),  -- uint8
              out_2 => Mux1_out1(1),  -- uint8
              out_3 => Mux1_out1(2),  -- uint8
              out_4 => Mux1_out1(3),  -- uint8
              out_5 => Mux1_out1(4),  -- uint8
              out_6 => Mux1_out1(5),  -- uint8
              out_7 => Mux1_out1(6),  -- uint8
              out_8 => Mux1_out1(7),  -- uint8
              out_9 => Mux1_out1(8)  -- uint8
              );

  u_slicer_R_operation5 : Subsystem_ip_src_slicer_R_operation5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(right_green1_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux5_out1(0),  -- uint8
              out_2 => Mux5_out1(1),  -- uint8
              out_3 => Mux5_out1(2),  -- uint8
              out_4 => Mux5_out1(3),  -- uint8
              out_5 => Mux5_out1(4),  -- uint8
              out_6 => Mux5_out1(5),  -- uint8
              out_7 => Mux5_out1(6),  -- uint8
              out_8 => Mux5_out1(7),  -- uint8
              out_9 => Mux5_out1(8)  -- uint8
              );

  u_slicer_R_operation6 : Subsystem_ip_src_slicer_R_operation6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(right_blue1_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux6_out1(0),  -- uint8
              out_2 => Mux6_out1(1),  -- uint8
              out_3 => Mux6_out1(2),  -- uint8
              out_4 => Mux6_out1(3),  -- uint8
              out_5 => Mux6_out1(4),  -- uint8
              out_6 => Mux6_out1(5),  -- uint8
              out_7 => Mux6_out1(6),  -- uint8
              out_8 => Mux6_out1(7),  -- uint8
              out_9 => Mux6_out1(8)  -- uint8
              );

  u_slicer_R_operation1 : Subsystem_ip_src_slicer_R_operation1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(right_red_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux2_out1(0),  -- uint8
              out_2 => Mux2_out1(1),  -- uint8
              out_3 => Mux2_out1(2),  -- uint8
              out_4 => Mux2_out1(3),  -- uint8
              out_5 => Mux2_out1(4),  -- uint8
              out_6 => Mux2_out1(5),  -- uint8
              out_7 => Mux2_out1(6),  -- uint8
              out_8 => Mux2_out1(7),  -- uint8
              out_9 => Mux2_out1(8)  -- uint8
              );

  u_slicer_R_operation2 : Subsystem_ip_src_slicer_R_operation2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(right_green_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux3_out1(0),  -- uint8
              out_2 => Mux3_out1(1),  -- uint8
              out_3 => Mux3_out1(2),  -- uint8
              out_4 => Mux3_out1(3),  -- uint8
              out_5 => Mux3_out1(4),  -- uint8
              out_6 => Mux3_out1(5),  -- uint8
              out_7 => Mux3_out1(6),  -- uint8
              out_8 => Mux3_out1(7),  -- uint8
              out_9 => Mux3_out1(8)  -- uint8
              );

  u_slicer_R_operation3 : Subsystem_ip_src_slicer_R_operation3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              channel_in => std_logic_vector(right_blue_out1),  -- uint8
              alphavalid => Enable,
              out_1 => Mux4_out1(0),  -- uint8
              out_2 => Mux4_out1(1),  -- uint8
              out_3 => Mux4_out1(2),  -- uint8
              out_4 => Mux4_out1(3),  -- uint8
              out_5 => Mux4_out1(4),  -- uint8
              out_6 => Mux4_out1(5),  -- uint8
              out_7 => Mux4_out1(6),  -- uint8
              out_8 => Mux4_out1(7),  -- uint8
              out_9 => Mux4_out1(8)  -- uint8
              );

  alphavalid <= Enable;

  enb_gated <= Enable AND enb;

  outputgen6: FOR k IN 0 TO 8 GENERATE
    coeffsGauss_unsigned(k) <= unsigned(coeffsGauss(k));
  END GENERATE;

  VideoIn_unsigned <= unsigned(VideoIn);

  right_red1_out1 <= VideoIn_unsigned(55 DOWNTO 48);


  outputgen5: FOR k IN 0 TO 8 GENERATE
    Mux1_out1_1(k) <= unsigned(Mux1_out1(k));
  END GENERATE;

  Data_Type_Conversion6_out1(0) <= Mux1_out1_1(0);
  Data_Type_Conversion6_out1(1) <= Mux1_out1_1(1);
  Data_Type_Conversion6_out1(2) <= Mux1_out1_1(2);
  Data_Type_Conversion6_out1(3) <= Mux1_out1_1(3);
  Data_Type_Conversion6_out1(4) <= Mux1_out1_1(4);
  Data_Type_Conversion6_out1(5) <= Mux1_out1_1(5);
  Data_Type_Conversion6_out1(6) <= Mux1_out1_1(6);
  Data_Type_Conversion6_out1(7) <= Mux1_out1_1(7);
  Data_Type_Conversion6_out1(8) <= Mux1_out1_1(8);

  Product3_out1(0) <= coeffsGauss_unsigned(0) * Data_Type_Conversion6_out1(0);
  Product3_out1(1) <= coeffsGauss_unsigned(1) * Data_Type_Conversion6_out1(1);
  Product3_out1(2) <= coeffsGauss_unsigned(2) * Data_Type_Conversion6_out1(2);
  Product3_out1(3) <= coeffsGauss_unsigned(3) * Data_Type_Conversion6_out1(3);
  Product3_out1(4) <= coeffsGauss_unsigned(4) * Data_Type_Conversion6_out1(4);
  Product3_out1(5) <= coeffsGauss_unsigned(5) * Data_Type_Conversion6_out1(5);
  Product3_out1(6) <= coeffsGauss_unsigned(6) * Data_Type_Conversion6_out1(6);
  Product3_out1(7) <= coeffsGauss_unsigned(7) * Data_Type_Conversion6_out1(7);
  Product3_out1(8) <= coeffsGauss_unsigned(8) * Data_Type_Conversion6_out1(8);

  enb_gated_1 <= Enable AND enb;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1(0) <= to_unsigned(16#0000#, 16);
      Delay2_out1(1) <= to_unsigned(16#0000#, 16);
      Delay2_out1(2) <= to_unsigned(16#0000#, 16);
      Delay2_out1(3) <= to_unsigned(16#0000#, 16);
      Delay2_out1(4) <= to_unsigned(16#0000#, 16);
      Delay2_out1(5) <= to_unsigned(16#0000#, 16);
      Delay2_out1(6) <= to_unsigned(16#0000#, 16);
      Delay2_out1(7) <= to_unsigned(16#0000#, 16);
      Delay2_out1(8) <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay2_out1(0) <= Product3_out1(0);
        Delay2_out1(1) <= Product3_out1(1);
        Delay2_out1(2) <= Product3_out1(2);
        Delay2_out1(3) <= Product3_out1(3);
        Delay2_out1(4) <= Product3_out1(4);
        Delay2_out1(5) <= Product3_out1(5);
        Delay2_out1(6) <= Product3_out1(6);
        Delay2_out1(7) <= Product3_out1(7);
        Delay2_out1(8) <= Product3_out1(8);
      END IF;
    END IF;
  END PROCESS Delay2_process;


  in0_0 <= Delay2_out1(0);

  in0_1 <= Delay2_out1(1);

  Sum_of_Elements3_op_stage1 <= resize(in0_0, 32) + resize(in0_1, 32);

  in0_2 <= Delay2_out1(2);

  Sum_of_Elements3_stage3_add_temp <= resize(Sum_of_Elements3_op_stage1, 33) + resize(in0_2, 33);
  
  Sum_of_Elements3_op_stage2 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage3_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage3_add_temp(31 DOWNTO 0);

  in0_3 <= Delay2_out1(3);

  Sum_of_Elements3_stage4_add_temp <= resize(Sum_of_Elements3_op_stage2, 33) + resize(in0_3, 33);
  
  Sum_of_Elements3_op_stage3 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage4_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage4_add_temp(31 DOWNTO 0);

  in0_4 <= Delay2_out1(4);

  Sum_of_Elements3_stage5_add_temp <= resize(Sum_of_Elements3_op_stage3, 33) + resize(in0_4, 33);
  
  Sum_of_Elements3_op_stage4 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage5_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage5_add_temp(31 DOWNTO 0);

  in0_5 <= Delay2_out1(5);

  Sum_of_Elements3_stage6_add_temp <= resize(Sum_of_Elements3_op_stage4, 33) + resize(in0_5, 33);
  
  Sum_of_Elements3_op_stage5 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage6_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage6_add_temp(31 DOWNTO 0);

  in0_6 <= Delay2_out1(6);

  Sum_of_Elements3_stage7_add_temp <= resize(Sum_of_Elements3_op_stage5, 33) + resize(in0_6, 33);
  
  Sum_of_Elements3_op_stage6 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage7_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage7_add_temp(31 DOWNTO 0);

  in0_7 <= Delay2_out1(7);

  Sum_of_Elements3_stage8_add_temp <= resize(Sum_of_Elements3_op_stage6, 33) + resize(in0_7, 33);
  
  Sum_of_Elements3_op_stage7 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage8_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage8_add_temp(31 DOWNTO 0);

  in0_8 <= Delay2_out1(8);

  Sum_of_Elements3_stage9_add_temp <= resize(Sum_of_Elements3_op_stage7, 33) + resize(in0_8, 33);
  
  out0 <= X"FFFFFFFF" WHEN Sum_of_Elements3_stage9_add_temp(32) /= '0' ELSE
      Sum_of_Elements3_stage9_add_temp(31 DOWNTO 0);

  Bit_Shift3_out1 <= SHIFT_RIGHT(out0, 4);

  Data_Type_Conversion12_out1 <= Bit_Shift3_out1(7 DOWNTO 0);

  Shift_Arithmetic4_out1 <= SHIFT_RIGHT(Data_Type_Conversion12_out1, 2);

  right_green1_out1 <= VideoIn_unsigned(47 DOWNTO 40);


  outputgen4: FOR k IN 0 TO 8 GENERATE
    Mux5_out1_1(k) <= unsigned(Mux5_out1(k));
  END GENERATE;

  Data_Type_Conversion7_out1(0) <= Mux5_out1_1(0);
  Data_Type_Conversion7_out1(1) <= Mux5_out1_1(1);
  Data_Type_Conversion7_out1(2) <= Mux5_out1_1(2);
  Data_Type_Conversion7_out1(3) <= Mux5_out1_1(3);
  Data_Type_Conversion7_out1(4) <= Mux5_out1_1(4);
  Data_Type_Conversion7_out1(5) <= Mux5_out1_1(5);
  Data_Type_Conversion7_out1(6) <= Mux5_out1_1(6);
  Data_Type_Conversion7_out1(7) <= Mux5_out1_1(7);
  Data_Type_Conversion7_out1(8) <= Mux5_out1_1(8);

  Product4_out1(0) <= coeffsGauss_unsigned(0) * Data_Type_Conversion7_out1(0);
  Product4_out1(1) <= coeffsGauss_unsigned(1) * Data_Type_Conversion7_out1(1);
  Product4_out1(2) <= coeffsGauss_unsigned(2) * Data_Type_Conversion7_out1(2);
  Product4_out1(3) <= coeffsGauss_unsigned(3) * Data_Type_Conversion7_out1(3);
  Product4_out1(4) <= coeffsGauss_unsigned(4) * Data_Type_Conversion7_out1(4);
  Product4_out1(5) <= coeffsGauss_unsigned(5) * Data_Type_Conversion7_out1(5);
  Product4_out1(6) <= coeffsGauss_unsigned(6) * Data_Type_Conversion7_out1(6);
  Product4_out1(7) <= coeffsGauss_unsigned(7) * Data_Type_Conversion7_out1(7);
  Product4_out1(8) <= coeffsGauss_unsigned(8) * Data_Type_Conversion7_out1(8);

  enb_gated_2 <= Enable AND enb;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1(0) <= to_unsigned(16#0000#, 16);
      Delay6_out1(1) <= to_unsigned(16#0000#, 16);
      Delay6_out1(2) <= to_unsigned(16#0000#, 16);
      Delay6_out1(3) <= to_unsigned(16#0000#, 16);
      Delay6_out1(4) <= to_unsigned(16#0000#, 16);
      Delay6_out1(5) <= to_unsigned(16#0000#, 16);
      Delay6_out1(6) <= to_unsigned(16#0000#, 16);
      Delay6_out1(7) <= to_unsigned(16#0000#, 16);
      Delay6_out1(8) <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_2 = '1' THEN
        Delay6_out1(0) <= Product4_out1(0);
        Delay6_out1(1) <= Product4_out1(1);
        Delay6_out1(2) <= Product4_out1(2);
        Delay6_out1(3) <= Product4_out1(3);
        Delay6_out1(4) <= Product4_out1(4);
        Delay6_out1(5) <= Product4_out1(5);
        Delay6_out1(6) <= Product4_out1(6);
        Delay6_out1(7) <= Product4_out1(7);
        Delay6_out1(8) <= Product4_out1(8);
      END IF;
    END IF;
  END PROCESS Delay6_process;


  in0_0_1 <= Delay6_out1(0);

  in0_1_1 <= Delay6_out1(1);

  Sum_of_Elements4_op_stage1 <= resize(in0_0_1, 32) + resize(in0_1_1, 32);

  in0_2_1 <= Delay6_out1(2);

  Sum_of_Elements4_stage3_add_temp <= resize(Sum_of_Elements4_op_stage1, 33) + resize(in0_2_1, 33);
  
  Sum_of_Elements4_op_stage2 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage3_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage3_add_temp(31 DOWNTO 0);

  in0_3_1 <= Delay6_out1(3);

  Sum_of_Elements4_stage4_add_temp <= resize(Sum_of_Elements4_op_stage2, 33) + resize(in0_3_1, 33);
  
  Sum_of_Elements4_op_stage3 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage4_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage4_add_temp(31 DOWNTO 0);

  in0_4_1 <= Delay6_out1(4);

  Sum_of_Elements4_stage5_add_temp <= resize(Sum_of_Elements4_op_stage3, 33) + resize(in0_4_1, 33);
  
  Sum_of_Elements4_op_stage4 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage5_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage5_add_temp(31 DOWNTO 0);

  in0_5_1 <= Delay6_out1(5);

  Sum_of_Elements4_stage6_add_temp <= resize(Sum_of_Elements4_op_stage4, 33) + resize(in0_5_1, 33);
  
  Sum_of_Elements4_op_stage5 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage6_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage6_add_temp(31 DOWNTO 0);

  in0_6_1 <= Delay6_out1(6);

  Sum_of_Elements4_stage7_add_temp <= resize(Sum_of_Elements4_op_stage5, 33) + resize(in0_6_1, 33);
  
  Sum_of_Elements4_op_stage6 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage7_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage7_add_temp(31 DOWNTO 0);

  in0_7_1 <= Delay6_out1(7);

  Sum_of_Elements4_stage8_add_temp <= resize(Sum_of_Elements4_op_stage6, 33) + resize(in0_7_1, 33);
  
  Sum_of_Elements4_op_stage7 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage8_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage8_add_temp(31 DOWNTO 0);

  in0_8_1 <= Delay6_out1(8);

  Sum_of_Elements4_stage9_add_temp <= resize(Sum_of_Elements4_op_stage7, 33) + resize(in0_8_1, 33);
  
  out0_1 <= X"FFFFFFFF" WHEN Sum_of_Elements4_stage9_add_temp(32) /= '0' ELSE
      Sum_of_Elements4_stage9_add_temp(31 DOWNTO 0);

  Bit_Shift4_out1 <= SHIFT_RIGHT(out0_1, 4);

  Data_Type_Conversion1_out1 <= Bit_Shift4_out1(7 DOWNTO 0);

  Shift_Arithmetic3_out1 <= SHIFT_RIGHT(Data_Type_Conversion1_out1, 1);

  Sum2_op_stage1 <= Shift_Arithmetic4_out1 + Shift_Arithmetic3_out1;

  right_blue1_out1 <= VideoIn_unsigned(39 DOWNTO 32);


  outputgen3: FOR k IN 0 TO 8 GENERATE
    Mux6_out1_1(k) <= unsigned(Mux6_out1(k));
  END GENERATE;

  Data_Type_Conversion8_out1(0) <= Mux6_out1_1(0);
  Data_Type_Conversion8_out1(1) <= Mux6_out1_1(1);
  Data_Type_Conversion8_out1(2) <= Mux6_out1_1(2);
  Data_Type_Conversion8_out1(3) <= Mux6_out1_1(3);
  Data_Type_Conversion8_out1(4) <= Mux6_out1_1(4);
  Data_Type_Conversion8_out1(5) <= Mux6_out1_1(5);
  Data_Type_Conversion8_out1(6) <= Mux6_out1_1(6);
  Data_Type_Conversion8_out1(7) <= Mux6_out1_1(7);
  Data_Type_Conversion8_out1(8) <= Mux6_out1_1(8);

  Product5_out1(0) <= coeffsGauss_unsigned(0) * Data_Type_Conversion8_out1(0);
  Product5_out1(1) <= coeffsGauss_unsigned(1) * Data_Type_Conversion8_out1(1);
  Product5_out1(2) <= coeffsGauss_unsigned(2) * Data_Type_Conversion8_out1(2);
  Product5_out1(3) <= coeffsGauss_unsigned(3) * Data_Type_Conversion8_out1(3);
  Product5_out1(4) <= coeffsGauss_unsigned(4) * Data_Type_Conversion8_out1(4);
  Product5_out1(5) <= coeffsGauss_unsigned(5) * Data_Type_Conversion8_out1(5);
  Product5_out1(6) <= coeffsGauss_unsigned(6) * Data_Type_Conversion8_out1(6);
  Product5_out1(7) <= coeffsGauss_unsigned(7) * Data_Type_Conversion8_out1(7);
  Product5_out1(8) <= coeffsGauss_unsigned(8) * Data_Type_Conversion8_out1(8);

  enb_gated_3 <= Enable AND enb;

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1(0) <= to_unsigned(16#0000#, 16);
      Delay8_out1(1) <= to_unsigned(16#0000#, 16);
      Delay8_out1(2) <= to_unsigned(16#0000#, 16);
      Delay8_out1(3) <= to_unsigned(16#0000#, 16);
      Delay8_out1(4) <= to_unsigned(16#0000#, 16);
      Delay8_out1(5) <= to_unsigned(16#0000#, 16);
      Delay8_out1(6) <= to_unsigned(16#0000#, 16);
      Delay8_out1(7) <= to_unsigned(16#0000#, 16);
      Delay8_out1(8) <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_3 = '1' THEN
        Delay8_out1(0) <= Product5_out1(0);
        Delay8_out1(1) <= Product5_out1(1);
        Delay8_out1(2) <= Product5_out1(2);
        Delay8_out1(3) <= Product5_out1(3);
        Delay8_out1(4) <= Product5_out1(4);
        Delay8_out1(5) <= Product5_out1(5);
        Delay8_out1(6) <= Product5_out1(6);
        Delay8_out1(7) <= Product5_out1(7);
        Delay8_out1(8) <= Product5_out1(8);
      END IF;
    END IF;
  END PROCESS Delay8_process;


  in0_0_2 <= Delay8_out1(0);

  in0_1_2 <= Delay8_out1(1);

  Sum_of_Elements5_op_stage1 <= resize(in0_0_2, 32) + resize(in0_1_2, 32);

  in0_2_2 <= Delay8_out1(2);

  Sum_of_Elements5_stage3_add_temp <= resize(Sum_of_Elements5_op_stage1, 33) + resize(in0_2_2, 33);
  
  Sum_of_Elements5_op_stage2 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage3_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage3_add_temp(31 DOWNTO 0);

  in0_3_2 <= Delay8_out1(3);

  Sum_of_Elements5_stage4_add_temp <= resize(Sum_of_Elements5_op_stage2, 33) + resize(in0_3_2, 33);
  
  Sum_of_Elements5_op_stage3 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage4_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage4_add_temp(31 DOWNTO 0);

  in0_4_2 <= Delay8_out1(4);

  Sum_of_Elements5_stage5_add_temp <= resize(Sum_of_Elements5_op_stage3, 33) + resize(in0_4_2, 33);
  
  Sum_of_Elements5_op_stage4 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage5_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage5_add_temp(31 DOWNTO 0);

  in0_5_2 <= Delay8_out1(5);

  Sum_of_Elements5_stage6_add_temp <= resize(Sum_of_Elements5_op_stage4, 33) + resize(in0_5_2, 33);
  
  Sum_of_Elements5_op_stage5 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage6_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage6_add_temp(31 DOWNTO 0);

  in0_6_2 <= Delay8_out1(6);

  Sum_of_Elements5_stage7_add_temp <= resize(Sum_of_Elements5_op_stage5, 33) + resize(in0_6_2, 33);
  
  Sum_of_Elements5_op_stage6 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage7_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage7_add_temp(31 DOWNTO 0);

  in0_7_2 <= Delay8_out1(7);

  Sum_of_Elements5_stage8_add_temp <= resize(Sum_of_Elements5_op_stage6, 33) + resize(in0_7_2, 33);
  
  Sum_of_Elements5_op_stage7 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage8_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage8_add_temp(31 DOWNTO 0);

  in0_8_2 <= Delay8_out1(8);

  Sum_of_Elements5_stage9_add_temp <= resize(Sum_of_Elements5_op_stage7, 33) + resize(in0_8_2, 33);
  
  out0_2 <= X"FFFFFFFF" WHEN Sum_of_Elements5_stage9_add_temp(32) /= '0' ELSE
      Sum_of_Elements5_stage9_add_temp(31 DOWNTO 0);

  Bit_Shift5_out1 <= SHIFT_RIGHT(out0_2, 4);

  Data_Type_Conversion2_out1 <= Bit_Shift5_out1(7 DOWNTO 0);

  Shift_Arithmetic5_out1 <= SHIFT_RIGHT(Data_Type_Conversion2_out1, 3);

  Sum2_out1 <= Sum2_op_stage1 + Shift_Arithmetic5_out1;

  y <= Sum2_out1 & Data_Type_Conversion12_out1 & Data_Type_Conversion1_out1 & Data_Type_Conversion2_out1;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay4_out1 <= y;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  out0_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay4_out1_last_value <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  Delay4_out1_1 <= Delay4_out1_last_value WHEN alphavalid = '0' ELSE
      Delay4_out1;

  enb_gated_4 <= Enable AND enb;

  right_red_out1 <= VideoIn_unsigned(23 DOWNTO 16);


  outputgen2: FOR k IN 0 TO 8 GENERATE
    Mux2_out1_1(k) <= unsigned(Mux2_out1(k));
  END GENERATE;

  Product6_out1(0) <= coeffsGauss_unsigned(0) * Mux2_out1_1(0);
  Product6_out1(1) <= coeffsGauss_unsigned(1) * Mux2_out1_1(1);
  Product6_out1(2) <= coeffsGauss_unsigned(2) * Mux2_out1_1(2);
  Product6_out1(3) <= coeffsGauss_unsigned(3) * Mux2_out1_1(3);
  Product6_out1(4) <= coeffsGauss_unsigned(4) * Mux2_out1_1(4);
  Product6_out1(5) <= coeffsGauss_unsigned(5) * Mux2_out1_1(5);
  Product6_out1(6) <= coeffsGauss_unsigned(6) * Mux2_out1_1(6);
  Product6_out1(7) <= coeffsGauss_unsigned(7) * Mux2_out1_1(7);
  Product6_out1(8) <= coeffsGauss_unsigned(8) * Mux2_out1_1(8);

  enb_gated_5 <= Enable AND enb;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1(0) <= to_unsigned(16#0000#, 16);
      Delay1_out1(1) <= to_unsigned(16#0000#, 16);
      Delay1_out1(2) <= to_unsigned(16#0000#, 16);
      Delay1_out1(3) <= to_unsigned(16#0000#, 16);
      Delay1_out1(4) <= to_unsigned(16#0000#, 16);
      Delay1_out1(5) <= to_unsigned(16#0000#, 16);
      Delay1_out1(6) <= to_unsigned(16#0000#, 16);
      Delay1_out1(7) <= to_unsigned(16#0000#, 16);
      Delay1_out1(8) <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_5 = '1' THEN
        Delay1_out1(0) <= Product6_out1(0);
        Delay1_out1(1) <= Product6_out1(1);
        Delay1_out1(2) <= Product6_out1(2);
        Delay1_out1(3) <= Product6_out1(3);
        Delay1_out1(4) <= Product6_out1(4);
        Delay1_out1(5) <= Product6_out1(5);
        Delay1_out1(6) <= Product6_out1(6);
        Delay1_out1(7) <= Product6_out1(7);
        Delay1_out1(8) <= Product6_out1(8);
      END IF;
    END IF;
  END PROCESS Delay1_process;


  in0_0_3 <= Delay1_out1(0);

  in0_1_3 <= Delay1_out1(1);

  Sum_of_Elements6_op_stage1 <= resize(in0_0_3, 32) + resize(in0_1_3, 32);

  in0_2_3 <= Delay1_out1(2);

  Sum_of_Elements6_stage3_add_temp <= resize(Sum_of_Elements6_op_stage1, 33) + resize(in0_2_3, 33);
  
  Sum_of_Elements6_op_stage2 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage3_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage3_add_temp(31 DOWNTO 0);

  in0_3_3 <= Delay1_out1(3);

  Sum_of_Elements6_stage4_add_temp <= resize(Sum_of_Elements6_op_stage2, 33) + resize(in0_3_3, 33);
  
  Sum_of_Elements6_op_stage3 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage4_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage4_add_temp(31 DOWNTO 0);

  in0_4_3 <= Delay1_out1(4);

  Sum_of_Elements6_stage5_add_temp <= resize(Sum_of_Elements6_op_stage3, 33) + resize(in0_4_3, 33);
  
  Sum_of_Elements6_op_stage4 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage5_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage5_add_temp(31 DOWNTO 0);

  in0_5_3 <= Delay1_out1(5);

  Sum_of_Elements6_stage6_add_temp <= resize(Sum_of_Elements6_op_stage4, 33) + resize(in0_5_3, 33);
  
  Sum_of_Elements6_op_stage5 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage6_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage6_add_temp(31 DOWNTO 0);

  in0_6_3 <= Delay1_out1(6);

  Sum_of_Elements6_stage7_add_temp <= resize(Sum_of_Elements6_op_stage5, 33) + resize(in0_6_3, 33);
  
  Sum_of_Elements6_op_stage6 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage7_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage7_add_temp(31 DOWNTO 0);

  in0_7_3 <= Delay1_out1(7);

  Sum_of_Elements6_stage8_add_temp <= resize(Sum_of_Elements6_op_stage6, 33) + resize(in0_7_3, 33);
  
  Sum_of_Elements6_op_stage7 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage8_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage8_add_temp(31 DOWNTO 0);

  in0_8_3 <= Delay1_out1(8);

  Sum_of_Elements6_stage9_add_temp <= resize(Sum_of_Elements6_op_stage7, 33) + resize(in0_8_3, 33);
  
  out0_3 <= X"FFFFFFFF" WHEN Sum_of_Elements6_stage9_add_temp(32) /= '0' ELSE
      Sum_of_Elements6_stage9_add_temp(31 DOWNTO 0);

  Bit_Shift_out1 <= SHIFT_RIGHT(out0_3, 4);

  Data_Type_Conversion5_out1 <= Bit_Shift_out1(7 DOWNTO 0);

  Shift_Arithmetic2_out1 <= SHIFT_RIGHT(Data_Type_Conversion5_out1, 2);

  right_green_out1 <= VideoIn_unsigned(15 DOWNTO 8);


  outputgen1: FOR k IN 0 TO 8 GENERATE
    Mux3_out1_1(k) <= unsigned(Mux3_out1(k));
  END GENERATE;

  Data_Type_Conversion10_out1(0) <= Mux3_out1_1(0);
  Data_Type_Conversion10_out1(1) <= Mux3_out1_1(1);
  Data_Type_Conversion10_out1(2) <= Mux3_out1_1(2);
  Data_Type_Conversion10_out1(3) <= Mux3_out1_1(3);
  Data_Type_Conversion10_out1(4) <= Mux3_out1_1(4);
  Data_Type_Conversion10_out1(5) <= Mux3_out1_1(5);
  Data_Type_Conversion10_out1(6) <= Mux3_out1_1(6);
  Data_Type_Conversion10_out1(7) <= Mux3_out1_1(7);
  Data_Type_Conversion10_out1(8) <= Mux3_out1_1(8);

  Product1_out1(0) <= coeffsGauss_unsigned(0) * Data_Type_Conversion10_out1(0);
  Product1_out1(1) <= coeffsGauss_unsigned(1) * Data_Type_Conversion10_out1(1);
  Product1_out1(2) <= coeffsGauss_unsigned(2) * Data_Type_Conversion10_out1(2);
  Product1_out1(3) <= coeffsGauss_unsigned(3) * Data_Type_Conversion10_out1(3);
  Product1_out1(4) <= coeffsGauss_unsigned(4) * Data_Type_Conversion10_out1(4);
  Product1_out1(5) <= coeffsGauss_unsigned(5) * Data_Type_Conversion10_out1(5);
  Product1_out1(6) <= coeffsGauss_unsigned(6) * Data_Type_Conversion10_out1(6);
  Product1_out1(7) <= coeffsGauss_unsigned(7) * Data_Type_Conversion10_out1(7);
  Product1_out1(8) <= coeffsGauss_unsigned(8) * Data_Type_Conversion10_out1(8);

  enb_gated_6 <= Enable AND enb;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1(0) <= to_unsigned(16#0000#, 16);
      Delay5_out1(1) <= to_unsigned(16#0000#, 16);
      Delay5_out1(2) <= to_unsigned(16#0000#, 16);
      Delay5_out1(3) <= to_unsigned(16#0000#, 16);
      Delay5_out1(4) <= to_unsigned(16#0000#, 16);
      Delay5_out1(5) <= to_unsigned(16#0000#, 16);
      Delay5_out1(6) <= to_unsigned(16#0000#, 16);
      Delay5_out1(7) <= to_unsigned(16#0000#, 16);
      Delay5_out1(8) <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_6 = '1' THEN
        Delay5_out1(0) <= Product1_out1(0);
        Delay5_out1(1) <= Product1_out1(1);
        Delay5_out1(2) <= Product1_out1(2);
        Delay5_out1(3) <= Product1_out1(3);
        Delay5_out1(4) <= Product1_out1(4);
        Delay5_out1(5) <= Product1_out1(5);
        Delay5_out1(6) <= Product1_out1(6);
        Delay5_out1(7) <= Product1_out1(7);
        Delay5_out1(8) <= Product1_out1(8);
      END IF;
    END IF;
  END PROCESS Delay5_process;


  in0_0_4 <= Delay5_out1(0);

  in0_1_4 <= Delay5_out1(1);

  Sum_of_Elements1_op_stage1 <= resize(in0_0_4, 32) + resize(in0_1_4, 32);

  in0_2_4 <= Delay5_out1(2);

  Sum_of_Elements1_stage3_add_temp <= resize(Sum_of_Elements1_op_stage1, 33) + resize(in0_2_4, 33);
  
  Sum_of_Elements1_op_stage2 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage3_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage3_add_temp(31 DOWNTO 0);

  in0_3_4 <= Delay5_out1(3);

  Sum_of_Elements1_stage4_add_temp <= resize(Sum_of_Elements1_op_stage2, 33) + resize(in0_3_4, 33);
  
  Sum_of_Elements1_op_stage3 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage4_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage4_add_temp(31 DOWNTO 0);

  in0_4_4 <= Delay5_out1(4);

  Sum_of_Elements1_stage5_add_temp <= resize(Sum_of_Elements1_op_stage3, 33) + resize(in0_4_4, 33);
  
  Sum_of_Elements1_op_stage4 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage5_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage5_add_temp(31 DOWNTO 0);

  in0_5_4 <= Delay5_out1(5);

  Sum_of_Elements1_stage6_add_temp <= resize(Sum_of_Elements1_op_stage4, 33) + resize(in0_5_4, 33);
  
  Sum_of_Elements1_op_stage5 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage6_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage6_add_temp(31 DOWNTO 0);

  in0_6_4 <= Delay5_out1(6);

  Sum_of_Elements1_stage7_add_temp <= resize(Sum_of_Elements1_op_stage5, 33) + resize(in0_6_4, 33);
  
  Sum_of_Elements1_op_stage6 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage7_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage7_add_temp(31 DOWNTO 0);

  in0_7_4 <= Delay5_out1(7);

  Sum_of_Elements1_stage8_add_temp <= resize(Sum_of_Elements1_op_stage6, 33) + resize(in0_7_4, 33);
  
  Sum_of_Elements1_op_stage7 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage8_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage8_add_temp(31 DOWNTO 0);

  in0_8_4 <= Delay5_out1(8);

  Sum_of_Elements1_stage9_add_temp <= resize(Sum_of_Elements1_op_stage7, 33) + resize(in0_8_4, 33);
  
  out0_4 <= X"FFFFFFFF" WHEN Sum_of_Elements1_stage9_add_temp(32) /= '0' ELSE
      Sum_of_Elements1_stage9_add_temp(31 DOWNTO 0);

  Bit_Shift1_out1 <= SHIFT_RIGHT(out0_4, 4);

  Data_Type_Conversion4_out1 <= Bit_Shift1_out1(7 DOWNTO 0);

  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(Data_Type_Conversion4_out1, 1);

  Sum1_op_stage1 <= Shift_Arithmetic2_out1 + Shift_Arithmetic1_out1;

  right_blue_out1 <= VideoIn_unsigned(7 DOWNTO 0);


  outputgen: FOR k IN 0 TO 8 GENERATE
    Mux4_out1_1(k) <= unsigned(Mux4_out1(k));
  END GENERATE;

  Data_Type_Conversion9_out1(0) <= Mux4_out1_1(0);
  Data_Type_Conversion9_out1(1) <= Mux4_out1_1(1);
  Data_Type_Conversion9_out1(2) <= Mux4_out1_1(2);
  Data_Type_Conversion9_out1(3) <= Mux4_out1_1(3);
  Data_Type_Conversion9_out1(4) <= Mux4_out1_1(4);
  Data_Type_Conversion9_out1(5) <= Mux4_out1_1(5);
  Data_Type_Conversion9_out1(6) <= Mux4_out1_1(6);
  Data_Type_Conversion9_out1(7) <= Mux4_out1_1(7);
  Data_Type_Conversion9_out1(8) <= Mux4_out1_1(8);

  Product2_out1(0) <= coeffsGauss_unsigned(0) * Data_Type_Conversion9_out1(0);
  Product2_out1(1) <= coeffsGauss_unsigned(1) * Data_Type_Conversion9_out1(1);
  Product2_out1(2) <= coeffsGauss_unsigned(2) * Data_Type_Conversion9_out1(2);
  Product2_out1(3) <= coeffsGauss_unsigned(3) * Data_Type_Conversion9_out1(3);
  Product2_out1(4) <= coeffsGauss_unsigned(4) * Data_Type_Conversion9_out1(4);
  Product2_out1(5) <= coeffsGauss_unsigned(5) * Data_Type_Conversion9_out1(5);
  Product2_out1(6) <= coeffsGauss_unsigned(6) * Data_Type_Conversion9_out1(6);
  Product2_out1(7) <= coeffsGauss_unsigned(7) * Data_Type_Conversion9_out1(7);
  Product2_out1(8) <= coeffsGauss_unsigned(8) * Data_Type_Conversion9_out1(8);

  enb_gated_7 <= Enable AND enb;

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1(0) <= to_unsigned(16#0000#, 16);
      Delay7_out1(1) <= to_unsigned(16#0000#, 16);
      Delay7_out1(2) <= to_unsigned(16#0000#, 16);
      Delay7_out1(3) <= to_unsigned(16#0000#, 16);
      Delay7_out1(4) <= to_unsigned(16#0000#, 16);
      Delay7_out1(5) <= to_unsigned(16#0000#, 16);
      Delay7_out1(6) <= to_unsigned(16#0000#, 16);
      Delay7_out1(7) <= to_unsigned(16#0000#, 16);
      Delay7_out1(8) <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_7 = '1' THEN
        Delay7_out1(0) <= Product2_out1(0);
        Delay7_out1(1) <= Product2_out1(1);
        Delay7_out1(2) <= Product2_out1(2);
        Delay7_out1(3) <= Product2_out1(3);
        Delay7_out1(4) <= Product2_out1(4);
        Delay7_out1(5) <= Product2_out1(5);
        Delay7_out1(6) <= Product2_out1(6);
        Delay7_out1(7) <= Product2_out1(7);
        Delay7_out1(8) <= Product2_out1(8);
      END IF;
    END IF;
  END PROCESS Delay7_process;


  in0_0_5 <= Delay7_out1(0);

  in0_1_5 <= Delay7_out1(1);

  Sum_of_Elements2_op_stage1 <= resize(in0_0_5, 32) + resize(in0_1_5, 32);

  in0_2_5 <= Delay7_out1(2);

  Sum_of_Elements2_stage3_add_temp <= resize(Sum_of_Elements2_op_stage1, 33) + resize(in0_2_5, 33);
  
  Sum_of_Elements2_op_stage2 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage3_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage3_add_temp(31 DOWNTO 0);

  in0_3_5 <= Delay7_out1(3);

  Sum_of_Elements2_stage4_add_temp <= resize(Sum_of_Elements2_op_stage2, 33) + resize(in0_3_5, 33);
  
  Sum_of_Elements2_op_stage3 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage4_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage4_add_temp(31 DOWNTO 0);

  in0_4_5 <= Delay7_out1(4);

  Sum_of_Elements2_stage5_add_temp <= resize(Sum_of_Elements2_op_stage3, 33) + resize(in0_4_5, 33);
  
  Sum_of_Elements2_op_stage4 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage5_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage5_add_temp(31 DOWNTO 0);

  in0_5_5 <= Delay7_out1(5);

  Sum_of_Elements2_stage6_add_temp <= resize(Sum_of_Elements2_op_stage4, 33) + resize(in0_5_5, 33);
  
  Sum_of_Elements2_op_stage5 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage6_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage6_add_temp(31 DOWNTO 0);

  in0_6_5 <= Delay7_out1(6);

  Sum_of_Elements2_stage7_add_temp <= resize(Sum_of_Elements2_op_stage5, 33) + resize(in0_6_5, 33);
  
  Sum_of_Elements2_op_stage6 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage7_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage7_add_temp(31 DOWNTO 0);

  in0_7_5 <= Delay7_out1(7);

  Sum_of_Elements2_stage8_add_temp <= resize(Sum_of_Elements2_op_stage6, 33) + resize(in0_7_5, 33);
  
  Sum_of_Elements2_op_stage7 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage8_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage8_add_temp(31 DOWNTO 0);

  in0_8_5 <= Delay7_out1(8);

  Sum_of_Elements2_stage9_add_temp <= resize(Sum_of_Elements2_op_stage7, 33) + resize(in0_8_5, 33);
  
  out0_5 <= X"FFFFFFFF" WHEN Sum_of_Elements2_stage9_add_temp(32) /= '0' ELSE
      Sum_of_Elements2_stage9_add_temp(31 DOWNTO 0);

  Bit_Shift2_out1 <= SHIFT_RIGHT(out0_5, 4);

  Data_Type_Conversion3_out1 <= Bit_Shift2_out1(7 DOWNTO 0);

  Shift_Arithmetic6_out1 <= SHIFT_RIGHT(Data_Type_Conversion3_out1, 3);

  Sum1_out1 <= Sum1_op_stage1 + Shift_Arithmetic6_out1;

  y_1 <= Sum1_out1 & Data_Type_Conversion5_out1 & Data_Type_Conversion4_out1 & Data_Type_Conversion3_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_4 = '1' THEN
        Delay3_out1 <= y_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  out0_bypass_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated_4 = '1' THEN
        Delay3_out1_last_value <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_1_process;


  
  Delay3_out1_1 <= Delay3_out1_last_value WHEN alphavalid = '0' ELSE
      Delay3_out1;

  Bit_Concat1_out1 <= Delay4_out1_1 & Delay3_out1_1;

  Video_out <= std_logic_vector(Bit_Concat1_out1);

END rtl;

