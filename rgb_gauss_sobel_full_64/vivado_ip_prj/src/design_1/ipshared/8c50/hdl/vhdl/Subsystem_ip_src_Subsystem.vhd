-- -------------------------------------------------------------
-- 
-- File Name: C:\Projects\fusion2_HWaccel_IP\rgb_gauss_sobel_full_64\hdlsrc\rgb_gauss_sobel_64bit_full\Subsystem_ip_src_Subsystem.vhd
-- Created: 2023-05-04 18:21:05
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.77039e-06
-- Target subsystem base rate: 2.77039e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.77039e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- valid_out_hStart              ce_out        2.77039e-06
-- valid_out_hEnd                ce_out        2.77039e-06
-- valid_out_vStart              ce_out        2.77039e-06
-- valid_out_vEnd                ce_out        2.77039e-06
-- valid_out_valid               ce_out        2.77039e-06
-- video_out                     ce_out        2.77039e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_Subsystem
-- Source Path: rgb_gauss_sobel_64bit_full/Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Subsystem_ip_src_Subsystem_pkg.ALL;

ENTITY Subsystem_ip_src_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        video_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        greenMax                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        blueMax                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        redMax                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        greenMin                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        blueMin                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        redMin                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic;
        video_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END Subsystem_ip_src_Subsystem;


ARCHITECTURE rtl OF Subsystem_ip_src_Subsystem IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_rgb_filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          redMax                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          greenMax                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          blueMax                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_in                        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          redMin                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          greenMin                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          blueMin                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Video_out                       :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_conv_core_gauss
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          coeffsGauss                     :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          Video_out                       :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem_ip_src_conv_core_sobel1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Video_in                        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          ctrl_hStart                     :   IN    std_logic;
          ctrl_hEnd                       :   IN    std_logic;
          ctrl_vStart                     :   IN    std_logic;
          ctrl_vEnd                       :   IN    std_logic;
          ctrl_valid                      :   IN    std_logic;
          coeffsX_bot_default             :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          coeffsY_right_default           :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          coeffsX_top                     :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          coeffsY_left                    :   IN    vector_of_std_logic_vector8(0 TO 8);  -- int8 [9]
          valid_out_hStart                :   OUT   std_logic;
          valid_out_hEnd                  :   OUT   std_logic;
          valid_out_vStart                :   OUT   std_logic;
          valid_out_vEnd                  :   OUT   std_logic;
          valid_out_valid                 :   OUT   std_logic;
          Video_out1                      :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_rgb_filter
    USE ENTITY work.Subsystem_ip_src_rgb_filter(rtl);

  FOR ALL : Subsystem_ip_src_conv_core_gauss
    USE ENTITY work.Subsystem_ip_src_conv_core_gauss(rtl);

  FOR ALL : Subsystem_ip_src_conv_core_sobel1
    USE ENTITY work.Subsystem_ip_src_conv_core_sobel1(rtl);

  -- Signals
  SIGNAL rgb_filter_out1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL rgb_filter_out2_hStart           : std_logic;
  SIGNAL rgb_filter_out2_hEnd             : std_logic;
  SIGNAL rgb_filter_out2_vStart           : std_logic;
  SIGNAL rgb_filter_out2_vEnd             : std_logic;
  SIGNAL rgb_filter_out2_valid            : std_logic;
  SIGNAL c18_gauss_out1                   : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL gauss_out1                       : matrix_of_unsigned8(0 TO 2, 0 TO 2);  -- uint8 [3x3]
  SIGNAL Reshape4_out1                    : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Reshape4_out1_1                  : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL conv_core_gauss_out1             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL conv_core_gauss_out2_hStart      : std_logic;
  SIGNAL conv_core_gauss_out2_hEnd        : std_logic;
  SIGNAL conv_core_gauss_out2_vStart      : std_logic;
  SIGNAL conv_core_gauss_out2_vEnd        : std_logic;
  SIGNAL conv_core_gauss_out2_valid       : std_logic;
  SIGNAL c20_xbot_out1                    : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL xbot_out1                        : matrix_of_signed8(0 TO 2, 0 TO 2);  -- int8 [3x3]
  SIGNAL Reshape_out1                     : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion_out1        : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL c26_yright_out1                  : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL yright_out1                      : matrix_of_signed8(0 TO 2, 0 TO 2);  -- int8 [3x3]
  SIGNAL Reshape1_out1                    : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion1_out1_1     : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL c22_xtop_out1                    : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL xtop_out1                        : matrix_of_signed8(0 TO 2, 0 TO 2);  -- int8 [3x3]
  SIGNAL Reshape2_out1                    : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion2_out1       : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion2_out1_1     : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL c24_yleft_out1                   : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL yleft_out1                       : matrix_of_signed8(0 TO 2, 0 TO 2);  -- int8 [3x3]
  SIGNAL Reshape3_out1                    : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion3_out1       : vector_of_signed8(0 TO 8);  -- int8 [9]
  SIGNAL Data_Type_Conversion3_out1_1     : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL conv_core_sobel1_out1_hStart     : std_logic;
  SIGNAL conv_core_sobel1_out1_hEnd       : std_logic;
  SIGNAL conv_core_sobel1_out1_vStart     : std_logic;
  SIGNAL conv_core_sobel1_out1_vEnd       : std_logic;
  SIGNAL conv_core_sobel1_out1_valid      : std_logic;
  SIGNAL conv_core_sobel1_out2            : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_rgb_filter : Subsystem_ip_src_rgb_filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              redMax => redMax,  -- uint8
              greenMax => greenMax,  -- uint8
              blueMax => blueMax,  -- uint8
              Video_in => video_in,  -- ufix64
              ctrl_hStart => ctrl_hStart,
              ctrl_hEnd => ctrl_hEnd,
              ctrl_vStart => ctrl_vStart,
              ctrl_vEnd => ctrl_vEnd,
              ctrl_valid => ctrl_valid,
              redMin => redMin,  -- uint8
              greenMin => greenMin,  -- uint8
              blueMin => blueMin,  -- uint8
              Video_out => rgb_filter_out1,  -- ufix64
              valid_out_hStart => rgb_filter_out2_hStart,
              valid_out_hEnd => rgb_filter_out2_hEnd,
              valid_out_vStart => rgb_filter_out2_vStart,
              valid_out_vEnd => rgb_filter_out2_vEnd,
              valid_out_valid => rgb_filter_out2_valid
              );

  u_conv_core_gauss : Subsystem_ip_src_conv_core_gauss
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => rgb_filter_out1,  -- ufix64
              coeffsGauss => Reshape4_out1_1,  -- uint8 [9]
              ctrl_hStart => rgb_filter_out2_hStart,
              ctrl_hEnd => rgb_filter_out2_hEnd,
              ctrl_vStart => rgb_filter_out2_vStart,
              ctrl_vEnd => rgb_filter_out2_vEnd,
              ctrl_valid => rgb_filter_out2_valid,
              Video_out => conv_core_gauss_out1,  -- ufix64
              valid_out_hStart => conv_core_gauss_out2_hStart,
              valid_out_hEnd => conv_core_gauss_out2_hEnd,
              valid_out_vStart => conv_core_gauss_out2_vStart,
              valid_out_vEnd => conv_core_gauss_out2_vEnd,
              valid_out_valid => conv_core_gauss_out2_valid
              );

  u_conv_core_sobel1 : Subsystem_ip_src_conv_core_sobel1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Video_in => conv_core_gauss_out1,  -- ufix64
              ctrl_hStart => conv_core_gauss_out2_hStart,
              ctrl_hEnd => conv_core_gauss_out2_hEnd,
              ctrl_vStart => conv_core_gauss_out2_vStart,
              ctrl_vEnd => conv_core_gauss_out2_vEnd,
              ctrl_valid => conv_core_gauss_out2_valid,
              coeffsX_bot_default => Data_Type_Conversion_out1_1,  -- int8 [9]
              coeffsY_right_default => Data_Type_Conversion1_out1_1,  -- int8 [9]
              coeffsX_top => Data_Type_Conversion2_out1_1,  -- int8 [9]
              coeffsY_left => Data_Type_Conversion3_out1_1,  -- int8 [9]
              valid_out_hStart => conv_core_sobel1_out1_hStart,
              valid_out_hEnd => conv_core_sobel1_out1_hEnd,
              valid_out_vStart => conv_core_sobel1_out1_vStart,
              valid_out_vEnd => conv_core_sobel1_out1_vEnd,
              valid_out_valid => conv_core_sobel1_out1_valid,
              Video_out1 => conv_core_sobel1_out2  -- ufix64
              );

  c18_gauss_out1(0) <= to_unsigned(16#01#, 8);
  c18_gauss_out1(1) <= to_unsigned(16#02#, 8);
  c18_gauss_out1(2) <= to_unsigned(16#01#, 8);
  c18_gauss_out1(3) <= to_unsigned(16#02#, 8);
  c18_gauss_out1(4) <= to_unsigned(16#04#, 8);
  c18_gauss_out1(5) <= to_unsigned(16#02#, 8);
  c18_gauss_out1(6) <= to_unsigned(16#01#, 8);
  c18_gauss_out1(7) <= to_unsigned(16#02#, 8);
  c18_gauss_out1(8) <= to_unsigned(16#01#, 8);

  gauss_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    gauss_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      gauss_out1(d0, d1) <= c18_gauss_out1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  Reshape4_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    Reshape4_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      Reshape4_out1(d0 + (d1 * 3)) <= gauss_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  outputgen4: FOR k IN 0 TO 8 GENERATE
    Reshape4_out1_1(k) <= std_logic_vector(Reshape4_out1(k));
  END GENERATE;

  c20_xbot_out1(0) <= to_signed(-16#01#, 8);
  c20_xbot_out1(1) <= to_signed(-16#02#, 8);
  c20_xbot_out1(2) <= to_signed(-16#01#, 8);
  c20_xbot_out1(3) <= to_signed(16#00#, 8);
  c20_xbot_out1(4) <= to_signed(16#00#, 8);
  c20_xbot_out1(5) <= to_signed(16#00#, 8);
  c20_xbot_out1(6) <= to_signed(16#01#, 8);
  c20_xbot_out1(7) <= to_signed(16#02#, 8);
  c20_xbot_out1(8) <= to_signed(16#01#, 8);

  xbot_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    xbot_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      xbot_out1(d0, d1) <= c20_xbot_out1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  Reshape_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    Reshape_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      Reshape_out1(d0 + (d1 * 3)) <= xbot_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  Data_Type_Conversion_out1(0) <= Reshape_out1(0);
  Data_Type_Conversion_out1(1) <= Reshape_out1(1);
  Data_Type_Conversion_out1(2) <= Reshape_out1(2);
  Data_Type_Conversion_out1(3) <= Reshape_out1(3);
  Data_Type_Conversion_out1(4) <= Reshape_out1(4);
  Data_Type_Conversion_out1(5) <= Reshape_out1(5);
  Data_Type_Conversion_out1(6) <= Reshape_out1(6);
  Data_Type_Conversion_out1(7) <= Reshape_out1(7);
  Data_Type_Conversion_out1(8) <= Reshape_out1(8);

  outputgen3: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion_out1_1(k) <= std_logic_vector(Data_Type_Conversion_out1(k));
  END GENERATE;

  c26_yright_out1(0) <= to_signed(-16#01#, 8);
  c26_yright_out1(1) <= to_signed(16#00#, 8);
  c26_yright_out1(2) <= to_signed(16#01#, 8);
  c26_yright_out1(3) <= to_signed(-16#02#, 8);
  c26_yright_out1(4) <= to_signed(16#00#, 8);
  c26_yright_out1(5) <= to_signed(16#02#, 8);
  c26_yright_out1(6) <= to_signed(-16#01#, 8);
  c26_yright_out1(7) <= to_signed(16#00#, 8);
  c26_yright_out1(8) <= to_signed(16#01#, 8);

  yright_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    yright_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      yright_out1(d0, d1) <= c26_yright_out1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  Reshape1_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    Reshape1_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      Reshape1_out1(d0 + (d1 * 3)) <= yright_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  Data_Type_Conversion1_out1(0) <= Reshape1_out1(0);
  Data_Type_Conversion1_out1(1) <= Reshape1_out1(1);
  Data_Type_Conversion1_out1(2) <= Reshape1_out1(2);
  Data_Type_Conversion1_out1(3) <= Reshape1_out1(3);
  Data_Type_Conversion1_out1(4) <= Reshape1_out1(4);
  Data_Type_Conversion1_out1(5) <= Reshape1_out1(5);
  Data_Type_Conversion1_out1(6) <= Reshape1_out1(6);
  Data_Type_Conversion1_out1(7) <= Reshape1_out1(7);
  Data_Type_Conversion1_out1(8) <= Reshape1_out1(8);

  outputgen2: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion1_out1_1(k) <= std_logic_vector(Data_Type_Conversion1_out1(k));
  END GENERATE;

  c22_xtop_out1(0) <= to_signed(16#01#, 8);
  c22_xtop_out1(1) <= to_signed(16#02#, 8);
  c22_xtop_out1(2) <= to_signed(16#01#, 8);
  c22_xtop_out1(3) <= to_signed(16#00#, 8);
  c22_xtop_out1(4) <= to_signed(16#00#, 8);
  c22_xtop_out1(5) <= to_signed(16#00#, 8);
  c22_xtop_out1(6) <= to_signed(-16#01#, 8);
  c22_xtop_out1(7) <= to_signed(-16#02#, 8);
  c22_xtop_out1(8) <= to_signed(-16#01#, 8);

  xtop_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    xtop_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      xtop_out1(d0, d1) <= c22_xtop_out1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  Reshape2_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    Reshape2_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      Reshape2_out1(d0 + (d1 * 3)) <= xtop_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  Data_Type_Conversion2_out1(0) <= Reshape2_out1(0);
  Data_Type_Conversion2_out1(1) <= Reshape2_out1(1);
  Data_Type_Conversion2_out1(2) <= Reshape2_out1(2);
  Data_Type_Conversion2_out1(3) <= Reshape2_out1(3);
  Data_Type_Conversion2_out1(4) <= Reshape2_out1(4);
  Data_Type_Conversion2_out1(5) <= Reshape2_out1(5);
  Data_Type_Conversion2_out1(6) <= Reshape2_out1(6);
  Data_Type_Conversion2_out1(7) <= Reshape2_out1(7);
  Data_Type_Conversion2_out1(8) <= Reshape2_out1(8);

  outputgen1: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion2_out1_1(k) <= std_logic_vector(Data_Type_Conversion2_out1(k));
  END GENERATE;

  c24_yleft_out1(0) <= to_signed(16#01#, 8);
  c24_yleft_out1(1) <= to_signed(16#00#, 8);
  c24_yleft_out1(2) <= to_signed(-16#01#, 8);
  c24_yleft_out1(3) <= to_signed(16#02#, 8);
  c24_yleft_out1(4) <= to_signed(16#00#, 8);
  c24_yleft_out1(5) <= to_signed(-16#02#, 8);
  c24_yleft_out1(6) <= to_signed(16#01#, 8);
  c24_yleft_out1(7) <= to_signed(16#00#, 8);
  c24_yleft_out1(8) <= to_signed(-16#01#, 8);

  yleft_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    yleft_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      yleft_out1(d0, d1) <= c24_yleft_out1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  Reshape3_out1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    Reshape3_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      Reshape3_out1(d0 + (d1 * 3)) <= yleft_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  Data_Type_Conversion3_out1(0) <= Reshape3_out1(0);
  Data_Type_Conversion3_out1(1) <= Reshape3_out1(1);
  Data_Type_Conversion3_out1(2) <= Reshape3_out1(2);
  Data_Type_Conversion3_out1(3) <= Reshape3_out1(3);
  Data_Type_Conversion3_out1(4) <= Reshape3_out1(4);
  Data_Type_Conversion3_out1(5) <= Reshape3_out1(5);
  Data_Type_Conversion3_out1(6) <= Reshape3_out1(6);
  Data_Type_Conversion3_out1(7) <= Reshape3_out1(7);
  Data_Type_Conversion3_out1(8) <= Reshape3_out1(8);

  outputgen: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion3_out1_1(k) <= std_logic_vector(Data_Type_Conversion3_out1(k));
  END GENERATE;

  valid_out_hStart <= conv_core_sobel1_out1_hStart;

  valid_out_hEnd <= conv_core_sobel1_out1_hEnd;

  valid_out_vStart <= conv_core_sobel1_out1_vStart;

  valid_out_vEnd <= conv_core_sobel1_out1_vEnd;

  valid_out_valid <= conv_core_sobel1_out1_valid;

  ce_out <= clk_enable;

  video_out <= conv_core_sobel1_out2;

END rtl;

