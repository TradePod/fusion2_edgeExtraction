-- -------------------------------------------------------------
-- 
-- File Name: C:\Projects\fusion2_HWaccel_IP\rgb_gauss_sobel_full_64\hdlsrc\rgb_gauss_sobel_64bit_full\Subsystem_ip_src_rgb_filter.vhd
-- Created: 2023-05-04 18:21:05
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_rgb_filter
-- Source Path: rgb_gauss_sobel_64bit_full/Subsystem/rgb_filter
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem_ip_src_rgb_filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        redMax                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        greenMax                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        blueMax                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Video_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        redMin                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        greenMin                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        blueMin                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Video_out                         :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic
        );
END Subsystem_ip_src_rgb_filter;


ARCHITECTURE rtl OF Subsystem_ip_src_rgb_filter IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_Subsystem1_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In2                             :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          redmax                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          greenmax                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          bluemax                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          redMin                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          greenMin                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          blueMin                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Enable                          :   IN    std_logic;
          Video_outLeft                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          Video_outRight                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_Subsystem1_block1
    USE ENTITY work.Subsystem_ip_src_Subsystem1_block1(rtl);

  -- Signals
  SIGNAL valid                            : std_logic;
  SIGNAL Subsystem1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem1_out2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem1_out1_unsigned         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Subsystem1_out2_unsigned         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat1_out1                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_hStart               : std_logic;
  SIGNAL Delay1_out1_hEnd                 : std_logic;
  SIGNAL Delay1_out1_vStart               : std_logic;
  SIGNAL Delay1_out1_vEnd                 : std_logic;
  SIGNAL Delay1_out1_valid                : std_logic;

BEGIN
  u_Subsystem1 : Subsystem_ip_src_Subsystem1_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In2 => Video_in,  -- ufix64
              redmax => redMax,  -- uint8
              greenmax => greenMax,  -- uint8
              bluemax => blueMax,  -- uint8
              redMin => redMin,  -- uint8
              greenMin => greenMin,  -- uint8
              blueMin => blueMin,  -- uint8
              Enable => valid,
              Video_outLeft => Subsystem1_out1,  -- uint32
              Video_outRight => Subsystem1_out2  -- uint32
              );

  valid <= ctrl_valid;

  Subsystem1_out1_unsigned <= unsigned(Subsystem1_out1);

  Subsystem1_out2_unsigned <= unsigned(Subsystem1_out2);

  Bit_Concat1_out1 <= Subsystem1_out1_unsigned & Subsystem1_out2_unsigned;

  Video_out <= std_logic_vector(Bit_Concat1_out1);

  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_hStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_hStart <= ctrl_hStart;
      END IF;
    END IF;
  END PROCESS c_process;


  valid_out_hStart <= Delay1_out1_hStart;

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_hEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_hEnd <= ctrl_hEnd;
      END IF;
    END IF;
  END PROCESS c_1_process;


  valid_out_hEnd <= Delay1_out1_hEnd;

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_vStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_vStart <= ctrl_vStart;
      END IF;
    END IF;
  END PROCESS c_2_process;


  valid_out_vStart <= Delay1_out1_vStart;

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_vEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_vEnd <= ctrl_vEnd;
      END IF;
    END IF;
  END PROCESS c_3_process;


  valid_out_vEnd <= Delay1_out1_vEnd;

  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_valid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_valid <= ctrl_valid;
      END IF;
    END IF;
  END PROCESS c_4_process;


  valid_out_valid <= Delay1_out1_valid;

END rtl;

